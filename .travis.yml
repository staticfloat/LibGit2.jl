language: objective-c
os:
  - linux
  - osx
compiler:
  - gcc
notifications:
  email: false
env:
    matrix:
        - JULIAVERSION="nightlies"
before_install:
  - if [ `uname` = "Linux" ]; then
      sudo add-apt-repository ppa:staticfloat/julia-deps -y;
      sudo add-apt-repository ppa:staticfloat/julia${JULIAVERSION} -y;
      sudo apt-get update -qq -y;
      sudo apt-get -qq install gdb cmake libssh2-1-dev openssh-client openssh-server;
      sudo apt-get install libpcre3-dev julia;
    elif [ `uname` = "Darwin" ]; then
      if [ "$JULIAVERSION" = "nightlies" ]; then
        wget -O julia.dmg "http://status.julialang.org/download/osx10.7+";
      else
        wget -O julia.dmg "http://status.julialang.org/stable/osx10.7+";
      fi;
      hdiutil mount julia.dmg;
      cp -Ra /Volumes/Julia/*.app/Contents/Resources/julia ~;
      export PATH="$PATH:$(echo ~)/julia/bin";
      brew install libgit2;
    fi
  - if [[ -a .git/shallow ]]; then git fetch --unshallow; fi
script:
  - git submodule init
  - git submodule update
  # we need a global config for config tests
  - git config --global user.name "testfirst testlast" 
  - git config --global user.email "test@test.com"
  - julia -e 'Pkg.init(); 
              run(`ln -s $(pwd()) $(Pkg.dir("LibGit2"))`);
              Pkg.pin("LibGit2");
              Pkg.resolve();'
  - julia -e 'Pkg.build("LibGit2")'
  - julia -e 'using LibGit2; @assert isdefined(:LibGit2); @assert typeof(LibGit2) === Module'
  - cd test/
  - julia --code-coverage runtests.jl all
# - sh run_remote_clone.sh

after_success:
  - julia -e 'cd(Pkg.dir("LibGit2")); 
              Pkg.add("Coverage"); 
              using Coverage; 
              Coveralls.submit(Coveralls.process_folder())'
